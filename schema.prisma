generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Books {
  id          String       @id @default(cuid())
  title       String
  description String?
  images      String[]
  authorName  String?
  categories  Categories[]
  comments    Comments[]
}

model Categories {
  id      String  @id @default(cuid())
  name    String
  Books   Books?  @relation(fields: [booksId], references: [id])
  booksId String?
}

model Comments {
  id        String   @id @default(cuid())
  comment   String
  score     Int
  userId    String?
  bookId    String
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  book      Books?   @relation(fields: [bookId], references: [id])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  comments      Comments[]
}

// Nex auth

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
